## Python 代码介绍文档

### 1. 简介

本文档详细介绍了基于Python实现的数独(Sudoku)求解程序。该程序通过深度优先搜索(DFS)和候选值推断的方式，解决标准9x9数独问题。数独是一种经典的逻辑推理游戏，要求在9x9的网格中填入1到9的数字，使得每一行、每一列和每个3x3的子网格内的数字都互不相同。

### 2. 程序结构

该数独求解程序由一个 `Sudoku`类组成，负责处理数独的初始化、输入解析、候选值计算、推断求解以及输出结果。以下是程序的详细结构和各个函数的功能说明。

### 3. 类和函数说明

#### 3.1 `Sudoku` 类

`Sudoku` 类包含数独求解的主要逻辑。该类的属性和方法如下：

#### 属性

* `GRID_SIZE`：网格的大小，固定为9（9x9的数独）。
* `BOX_SIZE`：每个子网格的大小，固定为3（每个3x3的小格）。
* `grid`：用于存储数独的9x9网格，其中未填充的格子用 `0`表示。

#### 方法

##### 3.1.1 `__init__(self, input_str)`

构造函数，用于初始化数独的网格并解析输入字符串。

* `input_str`：一个长度为81的字符串，表示数独的初始状态。空格用字符 `0`表示，已知的数字直接以字符形式输入。
* 调用 `parse()`方法将字符串转化为二维数组 `grid`。

##### 3.1.2 `parse(self, input_str)`

解析输入字符串，将其转换为9x9的二维数组。

* 首先调用 `input_is_safe()`检查输入字符串是否合法（长度必须为81）。
* 将字符串中的字符逐一转换为整数，并存储在 `grid`中。

##### 3.1.3 `input_is_safe(self, input_str)`

检查输入字符串是否合法。如果字符串长度不是81个字符，抛出 `ValueError`异常。

##### 3.1.4 `get_row(self, row)`

获取指定行的所有元素。

* `row`：要获取的行的索引。
* 返回该行的数字列表。

##### 3.1.5 `get_column(self, col)`

获取指定列的所有元素。

* `col`：要获取的列的索引。
* 返回该列的数字列表。

##### 3.1.6 `get_box(self, row, col)`

获取指定位置的3x3子网格中的所有数字。

* `row` 和 `col`：指定一个格子，确定它所在的3x3子网格。
* 返回该子网格中的数字列表。

##### 3.1.7 `get_candidate_values(self, row, col)`

获取特定位置可以填入的候选值（即1到9之间的合法数字）。

* `row` 和 `col`：指定要检查的空格位置。
* 候选值的筛选基于：
  * 当前行中的已有数字。
  * 当前列中的已有数字。
  * 当前3x3子网格中的已有数字。
* 返回一个候选值的集合。

##### 3.1.8 `inference(self)`

使用深度优先搜索(DFS)进行推理填充。

* 遍历整个网格，找到第一个未填充的空格。
* 使用 `get_candidate_values()`获取该空格的候选值，并尝试将每个候选值填入该空格。
* 如果填入后可以继续求解，则递归调用 `inference()`函数。
* 如果某一条路径无法继续，则回溯（将该格子重置为0），并尝试下一个候选值。
* 如果所有空格都被成功填满，返回 `True`，表示找到了解。

##### 3.1.9 `get_answer(self)`

启动数独求解，并输出求解结果。

* 如果通过 `inference()`成功找到解，输出数独解。
* 如果数独无解，输出提示信息。

##### 3.1.10 `print_grid(self)`

输出当前数独的网格。

* 格式化打印9x9的数独矩阵，每个数字以空格分隔，行与行之间换行。

### 4. 主函数

在 `if __name__ == "__main__":`部分，程序运行的入口。

* 定义了一个 `input_str`，表示要求解的数独初始状态。
* 创建 `Sudoku`类的实例，并调用 `get_answer()`进行求解。

### 5. 代码执行过程

1. **输入解析** ：程序接受一个长度为81的字符串，每个字符对应数独网格中的一个数字，空格用 `0`表示。该字符串被解析为一个9x9的整数矩阵。
2. **候选值计算** ：对于每一个空格，程序计算该空格的候选值，即可以合法填入的数字。这一计算基于数独的规则，即该数字不能出现在同一行、同一列以及同一3x3子网格中。
3. **深度优先搜索（DFS）求解** ：程序使用深度优先搜索和回溯法逐一尝试填入候选值。当遇到无法填入的情况时，程序会回溯到上一个步骤，尝试下一个候选值。
4. **解的输出** ：如果成功找到解，程序将打印解。如果数独无解，程序输出相应提示。
